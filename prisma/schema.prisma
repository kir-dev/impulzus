// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id             Int       @id @default(autoincrement())
  title          String
  previewContent String
  content        String
  categories     String[]
  tag            String[]
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  comments       Comment[]
}

model Newspaper {
  id         Int      @id @default(autoincrement())
  title      String
  contents   String[]
  ISSUU_Link String?
  coverImage String?
  grade      Int
  pdf        String?
}

model Idea {
  id          Int    @id @default(autoincrement())
  description String
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
}

model User {
  id            String    @id @default(cuid())
  authSchId     String?   @unique
  name          String
  email         String    @unique
  isAdmin       Boolean   @default(false)
  isBoardMember Boolean   @default(false)
  emailVerified DateTime?
  titles        String[]
  picture       String?
  posts         Post[]
  comments      Comment[]
  Account       Account[]
  Session       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
